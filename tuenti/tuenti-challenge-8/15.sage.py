# This file was *autogenerated* from the file ././15.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_5 = Integer(5); _sage_const_4 = Integer(4)#!/usr/bin/env sage
def t(a, p, e):
    b = pow(p, e)
    if p == _sage_const_2 :
        if a == _sage_const_0 : return _sage_const_2 
        if a % _sage_const_4  == _sage_const_1 : return b / gcd(a - _sage_const_1 , b)
        if a % _sage_const_4  == _sage_const_3 : return b / gcd(a + _sage_const_1 , b)
    if p == _sage_const_5 :
        if a % _sage_const_5  == _sage_const_1 : return b / gcd(a - _sage_const_1 , b)
        if a % _sage_const_5  == _sage_const_4 : return _sage_const_2  * b / gcd(a + _sage_const_1 , b)
        if a % _sage_const_5  == _sage_const_2 : return _sage_const_4  * b / gcd(a * a + _sage_const_1 , b)
        if a % _sage_const_5  == _sage_const_3 : return _sage_const_4  * b / gcd(a * a + _sage_const_1 , b)
    if a % p == _sage_const_1 : return b / gcd(a - _sage_const_1 , b)
    if a % p == p - _sage_const_1 : return _sage_const_2  * b / gcd(a + _sage_const_1 , b)

for T in range(int(raw_input())):
    x, a, c, m = map(int, raw_input().split())
    d = gcd(x * (a - _sage_const_1 ) + c, m)
    q = []
    for p, e in factor(m/d):
        k = pow(p, e)
        try:
            l = t(a, p, e)
            if l is None:
                l = Mod(a, k).multiplicative_order()
        except:
            l = _sage_const_1 
        q.append(gcd(a - _sage_const_1 , k) * l)
    p = lcm(q)
    ap = int(pow(a, int(p), m * (a - _sage_const_1 )))
    xn = (ap * x + (ap - _sage_const_1 ) * c / (a - _sage_const_1 )) % m
    while xn != x:
        p += _sage_const_1 
        x = (x * a + c) % m
        xn = (xn * a + c) % m
    print('Case #{}: {}'.format(T + _sage_const_1 , p + _sage_const_1 ))

